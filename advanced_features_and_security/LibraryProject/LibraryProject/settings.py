"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-vu0xa210)&ye+7f6f$y1ngibtc^0k+s41uiw60g6b(%v^0wf^3"

# SECURITY WARNING: don't run with debug turned on in production!
# In production, this MUST be set to False. Setting DEBUG to False disables
# the detailed error pages which can leak sensitive information.
DEBUG = True

# ALLOWED_HOSTS:
# In production, this must be a list of domain names (e.g., ['yourdomain.com', 'www.yourdomain.com'])
# that your Django site can serve. When DEBUG is False, Django will not serve
# requests to any other hostnames. This protects against some CSRF attacks.
ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'bookshelf',
    'csp', # Added for Content Security Policy (Task 2)
]

MIDDLEWARE = [
    # SecurityMiddleware should be at the top to ensure security headers are applied first.
    "django.middleware.security.SecurityMiddleware",
    # CSPMiddleware from django-csp should come early to apply Content Security Policy.
    'csp.middleware.CSPMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    # XFrameOptionsMiddleware helps prevent clickjacking attacks by setting X-Frame-Options header.
    # It's enabled here, but its behavior is configured by X_FRAME_OPTIONS setting below.
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "LibraryProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "LibraryProject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# -----------------------------------------------------------------------------
# Task 2: Implementing Security Best Practices in Django (Initial Security Headers & Cookies)
# These settings enhance general browser security and cookie handling.
# -----------------------------------------------------------------------------

# SECURE_CONTENT_TYPE_NOSNIFF:
# Set to True to prevent browsers from MIME-sniffing a response away from the
# declared content-type. This adds the X-Content-Type-Options: nosniff header.
SECURE_CONTENT_TYPE_NOSNIFF = True

# SECURE_BROWSER_XSS_FILTER:
# Set to True to enable the browserâ€™s XSS filtering and help prevent
# cross-site scripting attacks. This adds the X-XSS-Protection: 1; mode=block header.
SECURE_BROWSER_XSS_FILTER = True

# X_FRAME_OPTIONS:
# Set to 'DENY' to prevent your site from being loaded in an <iframe>, <frame>,
# or <object>. This protects against clickjacking attacks.
# 'SAMEORIGIN' allows framing only by pages from the same origin.
X_FRAME_OPTIONS = 'DENY'

# SESSION_COOKIE_SECURE:
# Set to True to ensure the session cookie is only sent over HTTPS connections.
# This prevents the session ID from being intercepted over insecure HTTP.
SESSION_COOKIE_SECURE = True

# CSRF_COOKIE_SECURE:
# Set to True to ensure the CSRF cookie is only sent over HTTPS connections.
# This prevents the CSRF token from being intercepted over insecure HTTP.
CSRF_COOKIE_SECURE = True

# -----------------------------------------------------------------------------
# Task 2: Content Security Policy (CSP) Implementation
# Configures Content Security Policy using django-csp to mitigate XSS.
# -----------------------------------------------------------------------------
CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        # default-src: Fallback for any fetch directives that are not specified.
        # Set to 'self' to allow content only from the same origin.
        'default-src': ("'self'",),
        # script-src: Specifies valid sources for JavaScript.
        # Set to 'self' to allow only scripts from the same origin.
        'script-src': ("'self'",),
        # style-src: Specifies valid sources for stylesheets.
        # Set to 'self' to allow only styles from the same origin.
        'style-src': ("'self'",),
        # img-src: Specifies valid sources for images.
        # Set to 'self' to allow only images from the same origin.
        'img-src': ("'self'",),
        # font-src: Specifies valid sources for fonts loaded using @font-face.
        # Set to 'self' to allow only fonts from the same origin.
        'font-src': ("'self'",),
        # connect-src: Restricts the URLs that can be loaded using script interfaces
        # (e.g., fetch, XMLHttpRequest, WebSockets). Set to 'self' for same origin.
        'connect-src': ("'self'",),
        # base-uri: Restricts the URLs that can be used in the <base> element.
        # Set to 'self' to allow only same-origin base URIs.
        'base-uri': ("'self'",),
        # object-src: Specifies valid sources for the <object>, <embed>, and <applet> elements.
        # Set to 'none' to disallow all plugin content. This is a common security best practice.
        'object-src': ("'none'",),
        # frame-ancestors: Specifies valid parents that may embed a page using <frame>,
        # <iframe>, <object>, <embed>, or <applet>. Set to 'self' for same origin only.
        # This provides additional clickjacking protection alongside X_FRAME_OPTIONS.
        'frame-ancestors': ("'self'",),
    },
    # 'REPORT_ONLY': False, # Set to True to only report violations, not block them (for testing).
    # 'REPORT_URI': '/csp-report/', # URL to send violation reports to (requires a view to handle reports).
}


# -----------------------------------------------------------------------------
# Task 3: Implementing HTTPS and Secure Redirects in Django
# These settings enforce HTTPS connections and enable HSTS (HTTP Strict Transport Security).
# -----------------------------------------------------------------------------

# SECURE_SSL_REDIRECT:
# Set to True to redirect all non-HTTPS requests to HTTPS.
# This works best when Django is behind a proxy that sets the 'X-Forwarded-Proto' header
# (e.g., Nginx, Apache). For local development with `runserver`, you'll still access via HTTP.
SECURE_SSL_REDIRECT = True

# SECURE_HSTS_SECONDS:
# Sets the 'Strict-Transport-Security' header. This instructs browsers to
# only access the site via HTTPS for the specified time (in seconds).
# 31536000 seconds = 1 year. This is a common and recommended value for production.
SECURE_HSTS_SECONDS = 31536000

# SECURE_HSTS_INCLUDE_SUBDOMAINS:
# If True, the HSTS policy applies to all subdomains as well.
# This should generally be True unless you have specific reasons not to in production.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# SECURE_HSTS_PRELOAD:
# Allows your domain to be preloaded in browser HSTS lists, ensuring browsers
# always access it via HTTPS, even on the first visit. Requires HSTS to be
# correctly set up and you to submit your domain to the HSTS preload list (external step).
SECURE_HSTS_PRELOAD = True

# Optional: SECURE_PROXY_SSL_HEADER
# If your Django app is behind a proxy/load balancer (e.g., Nginx) that handles SSL
# and then forwards plain HTTP to Django, you might need this to tell Django
# that the original request was secure. Replace with the actual header your proxy sends.
# For example: SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# Not typically needed for `runserver` or direct SSL termination by Django (rare).

# -----------------------------------------------------------------------------
# End of Task 3: HTTPS and Secure Redirects Configuration
# -----------------------------------------------------------------------------


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model (from previous tasks, if applicable)
AUTH_USER_MODEL = 'bookshelf.CustomUser'